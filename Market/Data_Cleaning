{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# File name: \n","\n","{Product HS code} {world/asia/myanmar} {import/export}{quant/unit/} ...xls"],"metadata":{"id":"_wyEm7vPJuJz"}},{"cell_type":"code","source":["#@title google\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8kK_vBxuK6Cu","executionInfo":{"status":"ok","timestamp":1666753616876,"user_tz":-390,"elapsed":21414,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"f7e52828-c299-4d8d-bb05-122fabe02b7b","collapsed":true,"cellView":"form"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["#@title modules\n","import os \n","import pandas as pd\n","import sqlite3 as db\n","from time import sleep\n","import numpy as np\n","import math\n"],"metadata":{"id":"KFML4sldwXyx","cellView":"form","executionInfo":{"status":"ok","timestamp":1666753616877,"user_tz":-390,"elapsed":12,"user":{"displayName":"cental pts","userId":"03187156431133244551"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["#@title folder reader\n","try:\n","    file_ = os.listdir(\"/content/data/\")[0]\n","    folder_path = \"/content/data/\"\n","    file_0 = folder_path + file_\n","    pd.read_csv(file_0)\n","except:\n","    folder_path = input(\"Copy and Paste Here the folder path : \")\n","\n","try:\n","    file_list = os.listdir(folder_path)\n","except: \n","    file_list = [folder_path]"],"metadata":{"id":"3RjBKEsLn4ve","cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666753625444,"user_tz":-390,"elapsed":8579,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"ec84969f-5840-43df-b477-03015b9e8293"},"execution_count":3,"outputs":[{"name":"stdout","output_type":"stream","text":["Copy and Paste Here the folder path : /content/data\n"]}]},{"cell_type":"code","source":["#@title code block\n","unit_list = []\n","\n","#files in data folder\n","for f_name in file_list: \n","\n","    #wait for db settling\n","    sleep(2)\n","\n","    #connect to db\n","    conn = db.connect(\"/content/drive/MyDrive/Market/Market.db\")\n","    cursor = conn.cursor()\n","    conn.commit()\n","\n","    \n","    name= f_name.lower()\n","    print(name)\n","\n","    #data cleaning if file is for values (volume)\n","    if (\"unit\" not in name) and (\"quant\" not in name):\n","        table_name = name.split()[1] + \"_\" + name.split()[2] + \"_\" + name.split()[0]\n","        query = \"SELECT * FROM \" + table_name\n","        try:\n","            df = pd.read_sql_query(query, conn)\n","        except:\n","            df = pd.DataFrame(columns = ['#'])\n","        try:\n","            temp_df = pd.DataFrame(pd.read_html(folder_path + \"/\" + f_name)[-1])\n","        except:\n","            temp_df = pd.read_csv(folder_path + \"/\" + f_name)\n","        \n","        #renaming the columns to year-month\n","        renamed_columns = []\n","        for col in temp_df.columns: \n","            col = col.replace(\"Importers\", \"#\")\n","            col = col.replace(\"Exporters\", \"#\")\n","            col = col.replace(\"Imported value in \", \"\")\n","            col = col.replace(\"Exported value in \", \"\")\n","            col = col.replace(\"M\", \"\")\n","            renamed_columns.append(col)\n","        temp_df.columns = renamed_columns \n","\n","        #merge the new table to database table\n","        df = pd.merge(df, temp_df, how = \"outer\", on= \"#\", suffixes = (\"_extra\", \"\"))\n","        df = df.drop(columns = [x for x in df.columns if \"_extra\" in x.lower()])\n","        df.dropna(how = \"all\")\n","        df = df.fillna(0)\n","        df = df.sort_index(axis = 1)\n","\n","        #upload the updated table to database\n","        df.to_sql(table_name, conn, if_exists = \"replace\", index = False)\n","        print(\"Uploading...\")\n","    else:\n","        if \"unit\" in name:\n","            table_name = name.split()[1] + \"_\" + name.split()[2] + \"_\" + name.split()[0] + \"_unit\"\n","        else:\n","            table_name = name.split()[1] + \"_\" + name.split()[2] + \"_\" + name.split()[0] + \"_quant\"\n","\n","        query = \"SELECT * FROM \" + table_name\n","        try:\n","            df = pd.read_sql_query(query, conn)\n","        except:\n","            df = pd.DataFrame(columns = ['#'])\n","        try:\n","            temp_df = pd.DataFrame(pd.read_html(folder_path + \"/\" + f_name)[-1])\n","        except:\n","            temp_df = pd.read_csv(folder_path + \"/\" + f_name)\n","        \n","        #change kilograms to tons\n","        for row_no in range(2, temp_df.shape[0]):\n","            for col_no in range(2, temp_df.shape[1] , 2):\n","                #kilo to ton\n","                if (\"kilo\" in str(temp_df.iloc[row_no,col_no]).lower()) and (temp_df.iloc[row_no,col_no].lower() != np.nan) : \n","                    if \"unit\" in name: \n","                        temp_df.iloc[row_no, col_no - 1] = float(temp_df.iloc[row_no,col_no -1])* 1000\n","                    elif \"quant\" in name:\n","                        temp_df.iloc[row_no,col_no - 1] = float(temp_df.iloc[row_no,col_no -1])/ 1000\n","                #pound to tons\n","                if (\"pound\" in str(temp_df.iloc[row_no,col_no]).lower()) and (temp_df.iloc[row_no,col_no].lower() != np.nan) : \n","                    if \"unit\" in name: \n","                        temp_df.iloc[row_no,col_no - 1] = float(temp_df.iloc[row_no,col_no -1])*2204.62\n","                    elif \"quant\" in name:\n","                        temp_df.iloc[row_no,col_no - 1] = float(temp_df.iloc[row_no,col_no -1])/2204.62\n","\n","                #first removal of outliers\n","                if \"import\" in name:\n","                    if (\"ton\" in str(temp_df.iloc[row_no,col_no]).lower()) and (temp_df.iloc[row_no,col_no].lower() != np.nan) and (float(temp_df.iloc[row_no,col_no -1]) > 100_000):\n","                        temp_df.iloc[row_no,col_no -1] = float(temp_df.iloc[row_no,col_no -1]) / 1000\n","                else:\n","                    if (\"ton\" in str(temp_df.iloc[row_no,col_no]).lower()) and (temp_df.iloc[row_no,col_no].lower() != np.nan) and (float(temp_df.iloc[row_no,col_no -1]) > 500_000):\n","                        temp_df.iloc[row_no,col_no -1] = float(temp_df.iloc[row_no,col_no -1]) / 1000\n","\n","                \n","                        \n","\n","        #drop unit columns\n","        for i, col in enumerate(temp_df.columns):\n","            if temp_df.iloc[1:2][i][1] == \"Unit\":\n","                #print(set(temp_df[col]))\n","                for unt in temp_df[col][1:]:\n","                    unit_list.append(unt)\n","                temp_df = temp_df.drop(columns = [col])\n","                \n","\n","        temp_df.columns = temp_df.iloc[0][:]\n","        if \"unit\" in name:\n","            temp_df = temp_df.iloc[2:][:-3]\n","        else:\n","            temp_df = temp_df.iloc[2:][:]\n","        temp_df.reset_index(drop = True, inplace = True)\n","\n","        #renaming the columns to year-month\n","        renamed_columns = []\n","        for col in temp_df.columns: \n","            col = col.replace(\"Importers\", \"#\")\n","            col = col.replace(\"Exporters\", \"#\")\n","            col = col.replace(\"Imported value in \", \"\")\n","            col = col.replace(\"Exported value in \", \"\")\n","            col = col.replace(\"M\", \"\")\n","            renamed_columns.append(col)\n","        temp_df.columns = renamed_columns \n","        temp_df = temp_df.replace(\"No Quantity\", 0)\n","\n","        df = pd.merge(df, temp_df, how = \"outer\", on= \"#\", suffixes = (\"_extra\", \"\"))\n","        df = df.drop(columns = [x for x in df.columns if \"_extra\" in x.lower()])\n","        df.dropna(how = \"all\")\n","        df = df.fillna(0)\n","        \n","        #convert to float\n","        for col in df.columns[1:]:\n","            df[col] = df[col].astype(float)\n","\n","        #handling outliers\n","        if \"import\" in name:\n","            for row_no in range(df.shape[0]):\n","                for col_no in range(1, df.shape[1]): \n","                    if (float(df.iloc[row_no, col_no]) >= 200_000): \n","                        df.iloc[row_no, col_no] = float(df.iloc[row_no, col_no])/1000\n","        elif \"export\" in name: \n","            for row_no in range(df.shape[0]):\n","                for col_no in range(1, df.shape[1]): \n","                    if (float(df.iloc[row_no, col_no]) >= 1_000_000): \n","                        df.iloc[row_no, col_no] = float(df.iloc[row_no, col_no])/1000\n","\n","        df = df.sort_index(axis = 1)\n","        df.to_sql(table_name, conn, if_exists = \"replace\", index = False)\n","        print(f_name + \" ------ > Uploading...\")\n","\n","    conn.close()\n","print(\"Data Uploaded Successfully!!!\")\n","print(set(unit_list))"],"metadata":{"id":"kC7ODERExaWh","cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666753637906,"user_tz":-390,"elapsed":12464,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"34802e9c-8235-4cd6-dd1c-8c11cc671535"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["721070 asia export quant.xls\n","721070 asia export quant.xls ------ > Uploading...\n","721070 asia import quant.xls\n","721070 asia import quant.xls ------ > Uploading...\n","721070 world import quant.xls\n","721070 world import quant.xls ------ > Uploading...\n","721070 world export quant.xls\n","721070 world export quant.xls ------ > Uploading...\n","Data Uploaded Successfully!!!\n","{nan, 'No Quantity', 'Kilograms', 'Pounds', 'Tons', 'Unit', 'Mixed'}\n"]}]}]}