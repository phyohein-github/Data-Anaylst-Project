{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from PIL import Image\n","import numpy as np\n","import pandas as pd\n","import os\n","import tensorflow as tf \n","\n","from tensorflow.keras import datasets, layers, models \n","import matplotlib.pyplot as plt "],"metadata":{"id":"oyPG2j4XtLi9","executionInfo":{"status":"ok","timestamp":1665733138496,"user_tz":-390,"elapsed":4709,"user":{"displayName":"cental pts","userId":"03187156431133244551"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["folder = \"/content/image/\"\n","\n","img_list = []\n","target_list = []\n","for i in range(1, 31): \n","\n","    if i!=28: \n","        im_path = folder + str(i) + \".png\"\n","        tg_path = folder + str(i) + \"_1.png\"\n","\n","        img = Image.open(im_path).convert(\"RGBA\")\n","        img = img.resize((1200, 800))\n","        img = tf.keras.preprocessing.image.img_to_array(img)\n","        img = tf.image.resize(img, (1200, 800))\n","\n","        img_list.append(img)\n","\n","\n","        tg = Image.open(tg_path).convert(\"RGBA\")\n","        tg = tg.resize((1200, 800))\n","        tg = tg.getchannel(\"R\")\n","\n","        tg = tf.keras.preprocessing.image.img_to_array(img)\n","        tg = tf.image.resize(tg, (1200, 800))\n","\n","        target_list.append(tg)\n","\n","data = pd.DataFrame() \n","data[\"Image\"] = img_list\n","data[\"Target\"] = target_list"],"metadata":{"id":"6pVDcFDptXlv","executionInfo":{"status":"ok","timestamp":1665733160382,"user_tz":-390,"elapsed":16613,"user":{"displayName":"cental pts","userId":"03187156431133244551"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xz_ovcSwuPPx","executionInfo":{"status":"ok","timestamp":1665733162838,"user_tz":-390,"elapsed":382,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"8cdd45ac-c5d4-41d0-fa32-9d6d768f9634"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 29 entries, 0 to 28\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   Image   29 non-null     object\n"," 1   Target  29 non-null     object\n","dtypes: object(2)\n","memory usage: 592.0+ bytes\n"]}]},{"cell_type":"code","source":["data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0JBmtSqNvfxu","executionInfo":{"status":"ok","timestamp":1665733412550,"user_tz":-390,"elapsed":245673,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"5da5ecfd-48f8-4a86-8a6e-b5a8f312f7c5"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                               Image  \\\n","0  (((tf.Tensor(179.0, shape=(), dtype=float32), ...   \n","1  (((tf.Tensor(86.25, shape=(), dtype=float32), ...   \n","2  (((tf.Tensor(83.5, shape=(), dtype=float32), t...   \n","3  (((tf.Tensor(50.25, shape=(), dtype=float32), ...   \n","4  (((tf.Tensor(208.75, shape=(), dtype=float32),...   \n","\n","                                              Target  \n","0  (((tf.Tensor(179.0, shape=(), dtype=float32), ...  \n","1  (((tf.Tensor(86.25, shape=(), dtype=float32), ...  \n","2  (((tf.Tensor(83.5, shape=(), dtype=float32), t...  \n","3  (((tf.Tensor(50.25, shape=(), dtype=float32), ...  \n","4  (((tf.Tensor(208.75, shape=(), dtype=float32),...  "],"text/html":["\n","  <div id=\"df-54bbc000-47fd-42c6-988b-dccccb46787c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Image</th>\n","      <th>Target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>(((tf.Tensor(179.0, shape=(), dtype=float32), ...</td>\n","      <td>(((tf.Tensor(179.0, shape=(), dtype=float32), ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>(((tf.Tensor(86.25, shape=(), dtype=float32), ...</td>\n","      <td>(((tf.Tensor(86.25, shape=(), dtype=float32), ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>(((tf.Tensor(83.5, shape=(), dtype=float32), t...</td>\n","      <td>(((tf.Tensor(83.5, shape=(), dtype=float32), t...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>(((tf.Tensor(50.25, shape=(), dtype=float32), ...</td>\n","      <td>(((tf.Tensor(50.25, shape=(), dtype=float32), ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>(((tf.Tensor(208.75, shape=(), dtype=float32),...</td>\n","      <td>(((tf.Tensor(208.75, shape=(), dtype=float32),...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54bbc000-47fd-42c6-988b-dccccb46787c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-54bbc000-47fd-42c6-988b-dccccb46787c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-54bbc000-47fd-42c6-988b-dccccb46787c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["data.iloc[0, 0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9MStDFWGvhu5","executionInfo":{"status":"ok","timestamp":1665733412551,"user_tz":-390,"elapsed":5,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"4510472f-2763-4309-cdef-6a468a39fe6b"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1200, 800, 4), dtype=float32, numpy=\n","array([[[179.      ,  98.      ,  94.      , 255.      ],\n","        [179.      ,  98.      ,  94.      , 255.      ],\n","        [179.      ,  98.      ,  94.      , 255.      ],\n","        ...,\n","        [ 27.75    ,  24.5     ,  18.5     , 255.      ],\n","        [ 19.75    ,  19.5     ,  12.25    , 255.      ],\n","        [ 17.5     ,  21.75    ,  13.      , 255.      ]],\n","\n","       [[179.375   ,  98.375   ,  94.375   , 255.      ],\n","        [179.      ,  98.      ,  94.      , 255.      ],\n","        [178.5     ,  97.5     ,  93.5     , 255.      ],\n","        ...,\n","        [ 27.      ,  23.25    ,  18.25    , 255.      ],\n","        [ 17.625   ,  18.      ,  10.625   , 255.      ],\n","        [ 15.75    ,  20.625   ,  11.      , 255.      ]],\n","\n","       [[179.75    ,  98.75    ,  94.75    , 255.      ],\n","        [178.875   ,  97.875   ,  93.875   , 255.      ],\n","        [178.      ,  97.      ,  93.      , 255.      ],\n","        ...,\n","        [ 25.708334,  21.583334,  17.5     , 255.      ],\n","        [ 15.041666,  16.041666,   8.375   , 255.      ],\n","        [ 13.791667,  19.166666,   8.5     , 255.      ]],\n","\n","       ...,\n","\n","       [[ 31.291718,  29.833374,  56.666626, 255.      ],\n","        [ 30.416748,  31.333374,  61.166626, 255.      ],\n","        [ 42.124786,  45.999756,  79.70804 , 255.      ],\n","        ...,\n","        [100.25079 , 110.37576 ,  92.084045, 255.      ],\n","        [ 87.209015,  92.87564 ,  76.12558 , 255.      ],\n","        [ 74.58362 ,  78.12521 ,  62.125153, 255.      ]],\n","\n","       [[ 32.625   ,  30.125   ,  56.25    , 255.      ],\n","        [ 31.5     ,  32.375   ,  61.875   , 255.      ],\n","        [ 39.625   ,  42.875   ,  75.375   , 255.      ],\n","        ...,\n","        [111.625   , 120.75    , 101.25    , 255.      ],\n","        [ 97.375   , 102.      ,  84.      , 255.      ],\n","        [ 76.      ,  79.125   ,  61.5     , 255.      ]],\n","\n","       [[ 33.75    ,  30.25    ,  56.      , 255.      ],\n","        [ 32.25    ,  33.25    ,  62.75    , 255.      ],\n","        [ 38.      ,  40.75    ,  72.25    , 255.      ],\n","        ...,\n","        [119.75    , 128.      , 107.5     , 255.      ],\n","        [104.75    , 108.5     ,  89.5     , 255.      ],\n","        [ 76.25    ,  79.25    ,  60.25    , 255.      ]]], dtype=float32)>"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data.iloc[0, 1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zw_0900tvpdU","executionInfo":{"status":"ok","timestamp":1665733742421,"user_tz":-390,"elapsed":403,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"2b176b0f-7312-4c00-a1a3-34cef0d0ce3e"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(1200, 800, 4), dtype=float32, numpy=\n","array([[[179.      ,  98.      ,  94.      , 255.      ],\n","        [179.      ,  98.      ,  94.      , 255.      ],\n","        [179.      ,  98.      ,  94.      , 255.      ],\n","        ...,\n","        [ 27.75    ,  24.5     ,  18.5     , 255.      ],\n","        [ 19.75    ,  19.5     ,  12.25    , 255.      ],\n","        [ 17.5     ,  21.75    ,  13.      , 255.      ]],\n","\n","       [[179.375   ,  98.375   ,  94.375   , 255.      ],\n","        [179.      ,  98.      ,  94.      , 255.      ],\n","        [178.5     ,  97.5     ,  93.5     , 255.      ],\n","        ...,\n","        [ 27.      ,  23.25    ,  18.25    , 255.      ],\n","        [ 17.625   ,  18.      ,  10.625   , 255.      ],\n","        [ 15.75    ,  20.625   ,  11.      , 255.      ]],\n","\n","       [[179.75    ,  98.75    ,  94.75    , 255.      ],\n","        [178.875   ,  97.875   ,  93.875   , 255.      ],\n","        [178.      ,  97.      ,  93.      , 255.      ],\n","        ...,\n","        [ 25.708334,  21.583334,  17.5     , 255.      ],\n","        [ 15.041666,  16.041666,   8.375   , 255.      ],\n","        [ 13.791667,  19.166666,   8.5     , 255.      ]],\n","\n","       ...,\n","\n","       [[ 31.291718,  29.833374,  56.666626, 255.      ],\n","        [ 30.416748,  31.333374,  61.166626, 255.      ],\n","        [ 42.124786,  45.999756,  79.70804 , 255.      ],\n","        ...,\n","        [100.25079 , 110.37576 ,  92.084045, 255.      ],\n","        [ 87.209015,  92.87564 ,  76.12558 , 255.      ],\n","        [ 74.58362 ,  78.12521 ,  62.125153, 255.      ]],\n","\n","       [[ 32.625   ,  30.125   ,  56.25    , 255.      ],\n","        [ 31.5     ,  32.375   ,  61.875   , 255.      ],\n","        [ 39.625   ,  42.875   ,  75.375   , 255.      ],\n","        ...,\n","        [111.625   , 120.75    , 101.25    , 255.      ],\n","        [ 97.375   , 102.      ,  84.      , 255.      ],\n","        [ 76.      ,  79.125   ,  61.5     , 255.      ]],\n","\n","       [[ 33.75    ,  30.25    ,  56.      , 255.      ],\n","        [ 32.25    ,  33.25    ,  62.75    , 255.      ],\n","        [ 38.      ,  40.75    ,  72.25    , 255.      ],\n","        ...,\n","        [119.75    , 128.      , 107.5     , 255.      ],\n","        [104.75    , 108.5     ,  89.5     , 255.      ],\n","        [ 76.25    ,  79.25    ,  60.25    , 255.      ]]], dtype=float32)>"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["model = models.Sequential() \n","\n","model.add(layers.Conv2D(32, (3, 3), activation = \"relu\", input_shape = (800, 1200, 4)))\n","model.add(layers.MaxPooling2D((2, 2)))\n","model.add(layers.Conv2D(64, (3, 3), activation = \"relu\"))\n","model.add(layers.MaxPooling2D(2, 2))\n","model.add(layers.Conv2D(64, (3, 3), activation = \"relu\"))\n"],"metadata":{"id":"ScRBqYEVWEOe","executionInfo":{"status":"ok","timestamp":1665733868745,"user_tz":-390,"elapsed":750,"user":{"displayName":"cental pts","userId":"03187156431133244551"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2bWv1xMQXyS7","executionInfo":{"status":"ok","timestamp":1665733870404,"user_tz":-390,"elapsed":10,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"be512adc-c9d2-4d6b-f04e-ccd643fd63f9"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_3 (Conv2D)           (None, 798, 1198, 32)     1184      \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 399, 599, 32)     0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_4 (Conv2D)           (None, 397, 597, 64)      18496     \n","                                                                 \n"," max_pooling2d_3 (MaxPooling  (None, 198, 298, 64)     0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_5 (Conv2D)           (None, 196, 296, 64)      36928     \n","                                                                 \n","=================================================================\n","Total params: 56,608\n","Trainable params: 56,608\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model.compile(optimizer = \"adam\", \n","              loss = tf.keras.losses. SparseCategoricalCrossentropy(from_logits=True), metrics = ['accuracy'])\n","history = model.fit(img_list[0], target_list[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":633},"id":"fZKAAPbIX1nf","executionInfo":{"status":"error","timestamp":1665733872682,"user_tz":-390,"elapsed":362,"user":{"displayName":"cental pts","userId":"03187156431133244551"}},"outputId":"77bbd14b-c1ec-4ce5-a4a3-890ea69e14b8"},"execution_count":15,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-4c08a44cd0d7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m model.compile(optimizer = \"adam\", \n\u001b[1;32m      2\u001b[0m               loss = tf.keras.losses. SparseCategoricalCrossentropy(from_logits=True), metrics = ['accuracy'])\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mtf__train_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1051, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1040, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 1030, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\", line 889, in train_step\n        y_pred = self(x, training=True)\n    File \"/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\", line 67, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"/usr/local/lib/python3.7/dist-packages/keras/engine/input_spec.py\", line 264, in assert_input_compatibility\n        raise ValueError(f'Input {input_index} of layer \"{layer_name}\" is '\n\n    ValueError: Input 0 of layer \"sequential_1\" is incompatible with the layer: expected shape=(None, 800, 1200, 4), found shape=(None, 800, 4)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"vusr7beta5qm","executionInfo":{"status":"aborted","timestamp":1665733138503,"user_tz":-390,"elapsed":10,"user":{"displayName":"cental pts","userId":"03187156431133244551"}}},"execution_count":null,"outputs":[]}]}